#!/usr/bin/env ruby

require_relative '../lib/job_scheduler/secrets_manager'
require_relative '../lib/job_scheduler/errors'
require 'optparse'

def show_usage
  puts <<~USAGE
    Usage: secrets [command] [options]
    
    Commands:
      set <key> <value>     Set a secret value
      get <key>             Get a secret value (masked)
      delete <key>          Delete a secret
      list                  List all secret keys
      exists <key>          Check if a secret exists
      import                Import secrets from environment variables (SECRET_*)
      backup <file>         Backup encrypted secrets to a file
      
    Options:
      -f, --secrets-file FILE    Path to secrets file (default: ./secrets.json.enc)
      -k, --key-file FILE        Path to encryption key file (default: ./secrets.key)
      -h, --help                 Show this help
      
    Examples:
      secrets set TELEGRAM_BOT_TOKEN "1234567890:ABCdefGHI..."
      secrets get TELEGRAM_BOT_TOKEN
      secrets list
      secrets import
      secrets backup ./backup/secrets.json.enc
      
    Environment Import:
      Set environment variables with SECRET_ prefix:
      export SECRET_TELEGRAM_BOT_TOKEN="your_token"
      export SECRET_DATABASE_PASSWORD="your_password"
      secrets import
  USAGE
end

# Parse options
options = {
  secrets_file: './secrets.json.enc',
  key_file: './secrets.key'
}

OptionParser.new do |opts|
  opts.on('-f', '--secrets-file FILE', 'Path to secrets file') do |file|
    options[:secrets_file] = file
  end
  
  opts.on('-k', '--key-file FILE', 'Path to key file') do |file|
    options[:key_file] = file
  end
  
  opts.on('-h', '--help', 'Show help') do
    show_usage
    exit 0
  end
end.parse!

# Check for command
if ARGV.empty?
  show_usage
  exit 1
end

command = ARGV[0]

begin
  secrets_manager = JobSchedulerComponents::SecretsManager.new(
    secrets_file: options[:secrets_file],
    key_file: options[:key_file]
  )
  
  case command
  when 'set'
    if ARGV.length < 3
      puts "Error: 'set' command requires key and value"
      puts "Usage: secrets set <key> <value>"
      exit 1
    end
    
    key = ARGV[1]
    value = ARGV[2]
    
    if secrets_manager.set(key, value)
      puts "Secret '#{key}' set successfully"
    else
      puts "Failed to set secret '#{key}'"
      exit 1
    end
    
  when 'get'
    if ARGV.length < 2
      puts "Error: 'get' command requires a key"
      puts "Usage: secrets get <key>"
      exit 1
    end
    
    key = ARGV[1]
    value = secrets_manager.get(key)
    
    if value
      # Mask the value for security
      masked_value = if value.length <= 8
        '*' * value.length
      else
        value[0..2] + '*' * (value.length - 6) + value[-3..-1]
      end
      puts "Secret '#{key}': #{masked_value}"
    else
      puts "Secret '#{key}' not found"
      exit 1
    end
    
  when 'delete'
    if ARGV.length < 2
      puts "Error: 'delete' command requires a key"
      puts "Usage: secrets delete <key>"
      exit 1
    end
    
    key = ARGV[1]
    if secrets_manager.delete(key)
      puts "Secret '#{key}' deleted successfully"
    else
      puts "Secret '#{key}' not found"
      exit 1
    end
    
  when 'list'
    keys = secrets_manager.keys
    if keys.empty?
      puts "No secrets stored"
    else
      puts "Stored secrets:"
      keys.sort.each do |key|
        puts "  #{key}"
      end
    end
    
  when 'exists'
    if ARGV.length < 2
      puts "Error: 'exists' command requires a key"
      puts "Usage: secrets exists <key>"
      exit 1
    end
    
    key = ARGV[1]
    if secrets_manager.exists?(key)
      puts "Secret '#{key}' exists"
      exit 0
    else
      puts "Secret '#{key}' does not exist"
      exit 1
    end
    
  when 'import'
    imported_count = secrets_manager.import_from_env
    if imported_count > 0
      puts "Imported #{imported_count} secrets from environment variables"
    else
      puts "No secrets found to import (looking for SECRET_* environment variables)"
    end
    
  when 'backup'
    if ARGV.length < 2
      puts "Error: 'backup' command requires a destination file"
      puts "Usage: secrets backup <file>"
      exit 1
    end
    
    backup_file = ARGV[1]
    if secrets_manager.backup(backup_file)
      puts "Secrets backed up to: #{backup_file}"
    else
      puts "Failed to backup secrets (no secrets file found?)"
      exit 1
    end
    
  else
    puts "Error: Unknown command '#{command}'"
    show_usage
    exit 1
  end
  
rescue => e
  puts "Error: #{e.message}"
  exit 1
end